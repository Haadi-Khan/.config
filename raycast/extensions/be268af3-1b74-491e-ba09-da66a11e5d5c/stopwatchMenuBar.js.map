{
  "version": 3,
  "sources": ["../src/stopwatchMenuBar.tsx", "../src/hooks/useStopwatches.ts", "../src/formatUtils.ts", "../src/stopwatchUtils.ts"],
  "sourcesContent": ["import { Icon, MenuBarExtra, getPreferenceValues } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useStopwatches from \"./hooks/useStopwatches\";\nimport { formatTime } from \"./formatUtils\";\nimport { Preferences, Stopwatch } from \"./types\";\n\nexport default function Command() {\n  const { stopwatches, isLoading, refreshSWes, handlePauseSW, handleStartSW, handleStopSW, handleUnpauseSW } =\n    useStopwatches();\n  useEffect(() => {\n    refreshSWes();\n    setInterval(() => {\n      refreshSWes();\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    refreshSWes();\n  }\n  const prefs = getPreferenceValues<Preferences>();\n  if (\n    (stopwatches == undefined || stopwatches.length == 0 || stopwatches.length == undefined) &&\n    prefs.showMenuBarItemWhen !== \"always\"\n  ) {\n    return null;\n  }\n\n  const getSWMenuBarTitle = () => {\n    if (stopwatches === undefined || stopwatches?.length === 0 || stopwatches.length == undefined) {\n      return undefined;\n    } else if (prefs.showTitleInMenuBar) {\n      return `${stopwatches[0].name}: ~${formatTime(stopwatches[0].timeElapsed)}`;\n    } else {\n      return `~${formatTime(stopwatches[0].timeElapsed)}`;\n    }\n  };\n\n  const swTitleSuffix = (sw: Stopwatch) => {\n    return sw.lastPaused === \"----\" ? \" elapsed\" : \" (paused)\";\n  };\n\n  return (\n    <MenuBarExtra\n      icon={prefs.showMenuBarItemWhen !== \"never\" ? Icon.Stopwatch : undefined}\n      isLoading={isLoading}\n      title={getSWMenuBarTitle()}\n    >\n      <MenuBarExtra.Item title=\"Click running stopwatch to pause\" />\n      {stopwatches?.map((sw) => (\n        <MenuBarExtra.Item\n          title={sw.name + \": \" + formatTime(sw.timeElapsed) + swTitleSuffix(sw)}\n          key={sw.swID}\n          onAction={() => (sw.lastPaused === \"----\" ? handlePauseSW(sw.swID) : handleUnpauseSW(sw.swID))}\n        />\n      ))}\n      <MenuBarExtra.Section>\n        {stopwatches?.map((sw) => (\n          <MenuBarExtra.Item title={`Delete \"${sw.name}\"`} key={sw.swID} onAction={() => handleStopSW(sw)} />\n        ))}\n      </MenuBarExtra.Section>\n\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item title=\"Start New Stopwatch\" onAction={() => handleStartSW()} key=\"startSW\" />\n      </MenuBarExtra.Section>\n    </MenuBarExtra>\n  );\n}\n", "import { Clipboard, getPreferenceValues } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { formatTime } from \"../formatUtils\";\nimport { getStopwatches, pauseStopwatch, startStopwatch, stopStopwatch, unpauseStopwatch } from \"../stopwatchUtils\";\nimport { Stopwatch } from \"../types\";\n\nexport default function useStopwatches() {\n  const [stopwatches, setStopwatches] = useState<Stopwatch[] | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(stopwatches === undefined);\n\n  const refreshSWes = () => {\n    const setOfStopwatches: Stopwatch[] = getStopwatches();\n    setStopwatches(setOfStopwatches);\n    setIsLoading(false);\n  };\n\n  const handleStartSW = (swName = \"Untitled\") => {\n    startStopwatch(swName);\n    refreshSWes();\n  };\n\n  const handlePauseSW = (swID: string) => {\n    pauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleUnpauseSW = (swID: string) => {\n    unpauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleStopSW = (stopwatch: Stopwatch) => {\n    const prefs = getPreferenceValues();\n    if (prefs.copyOnSwStop) {\n      Clipboard.copy(formatTime(stopwatch.timeElapsed));\n    }\n    stopStopwatch(stopwatch.swID);\n    refreshSWes();\n  };\n\n  const handleRestartSW = (stopwatch: Stopwatch) => {\n    handleStopSW(stopwatch);\n    handleStartSW(stopwatch.name);\n    refreshSWes();\n  };\n\n  return {\n    stopwatches,\n    isLoading,\n    refreshSWes,\n    handleRestartSW,\n    handleStartSW,\n    handleStopSW,\n    handlePauseSW,\n    handleUnpauseSW,\n  };\n}\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours}:${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\")\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime()\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { environment, popToRoot, showHUD } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { secondsBetweenDates } from \"./formatUtils\";\nimport { Stopwatch } from \"./types\";\n\nconst SWPATH = environment.supportPath + \"/raycast-stopwatches.json\";\n\nconst ensureSWFileExists = () => {\n  if (!existsSync(SWPATH) || readFileSync(SWPATH).toString() == \"\") {\n    writeFileSync(SWPATH, \"[]\");\n  }\n};\n\nconst initStopwatch = (swName = \"\"): Stopwatch => {\n  return {\n    name: swName,\n    swID: randomUUID(),\n    timeStarted: new Date(),\n    timeElapsed: -99,\n    lastPaused: \"----\",\n    pauseElapsed: 0,\n  };\n};\n\nconst processStopwatches = (swSet: Stopwatch[]) => {\n  swSet.map((x) => {\n    if (x.lastPaused != \"----\") {\n      x.timeElapsed = Math.max(0, secondsBetweenDates({ d1: x.lastPaused, d2: x.timeStarted }) - x.pauseElapsed);\n    } else {\n      const rawElapsedTime = Math.max(0, secondsBetweenDates({ d2: x.timeStarted }));\n      x.timeElapsed = rawElapsedTime - x.pauseElapsed;\n    }\n  });\n  return swSet;\n};\n\nconst getStopwatches = () => {\n  ensureSWFileExists();\n  const rawStopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const fullStopwatchSet = cleanUpOldStopwatches(rawStopwatches);\n  const setOfStopwatches = processStopwatches(fullStopwatchSet);\n  setOfStopwatches.sort((a, b) => {\n    return a.timeElapsed - b.timeElapsed;\n  });\n  return setOfStopwatches;\n};\n\nconst startStopwatch = async (swName = \"Untitled\") => {\n  ensureSWFileExists();\n  const swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const newTimer = initStopwatch(swName);\n  swStore.push(newTimer);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n\n  popToRoot();\n  await showHUD(`Stopwatch \"${swName}\" started! \uD83C\uDF89`);\n};\n\nconst pauseStopwatch = (swToPause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) => (s.swID == swToPause ? { ...s, lastPaused: new Date() } : s));\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst unpauseStopwatch = (swToUnpause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) =>\n    s.swID == swToUnpause\n      ? {\n          ...s,\n          pauseElapsed: s.pauseElapsed + secondsBetweenDates({ d2: s.lastPaused }),\n          lastPaused: \"----\",\n        }\n      : s\n  );\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst stopStopwatch = (swToDelete: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.filter((s: Stopwatch) => s.swID !== swToDelete);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst cleanUpOldStopwatches = (newStore: Stopwatch[]) => {\n  const files = readdirSync(environment.supportPath);\n  files.forEach((swFile: string) => {\n    if (extname(swFile) == \".stopwatch\") {\n      const stopwatch = initStopwatch(readFileSync(environment.supportPath + \"/\" + swFile).toString());\n      const timeStarted = swFile.replace(/__/g, \":\").replace(\".stopwatch\", \"\");\n      stopwatch.timeStarted = new Date(timeStarted);\n      stopwatch.timeElapsed = Math.max(0, secondsBetweenDates({}));\n      execSync(`rm \"${environment.supportPath}/${swFile}\"`);\n      newStore.push(stopwatch);\n    }\n  });\n  writeFileSync(SWPATH, JSON.stringify(newStore));\n  return newStore;\n};\n\nconst renameStopwatch = (swID: string, newName: string) => {\n  ensureSWFileExists();\n  const stopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH, \"utf8\"));\n  const renamedSW = stopwatches.map((x) => (x.swID == swID ? { ...x, name: newName } : x));\n  writeFileSync(SWPATH, JSON.stringify(renamedSW));\n};\n\nexport { getStopwatches, pauseStopwatch, unpauseStopwatch, startStopwatch, stopStopwatch, renameStopwatch };\n"],
  "mappings": "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",
  "names": ["stopwatchMenuBar_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "formatTime", "seconds", "hours", "mins", "secs", "secondsBetweenDates", "args", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "SWPATH", "ensureSWFileExists", "initStopwatch", "swName", "processStopwatches", "swSet", "x", "secondsBetweenDates", "rawElapsedTime", "getStopwatches", "rawStopwatches", "fullStopwatchSet", "cleanUpOldStopwatches", "setOfStopwatches", "a", "b", "startStopwatch", "swStore", "newTimer", "pauseStopwatch", "swToPause", "s", "unpauseStopwatch", "swToUnpause", "stopStopwatch", "swToDelete", "newStore", "swFile", "stopwatch", "timeStarted", "useStopwatches", "stopwatches", "setStopwatches", "isLoading", "setIsLoading", "refreshSWes", "setOfStopwatches", "getStopwatches", "handleStartSW", "swName", "startStopwatch", "handlePauseSW", "swID", "pauseStopwatch", "handleUnpauseSW", "unpauseStopwatch", "handleStopSW", "stopwatch", "formatTime", "stopStopwatch", "import_jsx_runtime", "Command", "stopwatches", "isLoading", "refreshSWes", "handlePauseSW", "handleStartSW", "handleStopSW", "handleUnpauseSW", "useStopwatches", "prefs", "getSWMenuBarTitle", "formatTime", "swTitleSuffix", "sw"]
}
