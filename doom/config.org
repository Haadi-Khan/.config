#+title: Config
#+author: Haadi Khan
#+property: tangle yes

* Table of Contents :toc:
- [[#packages][Packages]]
- [[#theme][Theme]]
  - [[#doom-specific][Doom Specific]]
  - [[#quality-of-life][Quality of Life]]
  - [[#ivy][Ivy]]
- [[#keyboard][Keyboard]]
  - [[#evil-rebinds][Evil Rebinds]]
  - [[#config-files][Config Files]]
  - [[#org][Org]]
  - [[#buffers][Buffers]]
  - [[#programming][Programming]]
- [[#org-1][Org]]
  - [[#modern-org-mode][Modern Org Mode]]
  - [[#fonts][Fonts]]
  - [[#toc][TOC]]
  - [[#todo][Todo]]
  - [[#latex][LaTeX]]
  - [[#deft][Deft]]
- [[#code][Code]]
  - [[#base-lsp-config][Base LSP Config]]
  - [[#dap-config][DAP Config]]
  - [[#treesitter][Treesitter]]
  - [[#rust][Rust]]
  - [[#python][Python]]
  - [[#cc][C/C++]]
  - [[#typescript][Typescript]]
- [[#latex-1][LaTeX]]
  - [[#base-latex][Base LaTeX]]
  - [[#preview][Preview]]
  - [[#cd-latex][CD LaTeX]]
  - [[#org-tables][Org Tables]]
  - [[#snippets][Snippets]]
- [[#random][Random]]
  - [[#typit][Typit]]

* Packages
Doom splits packages into their own file. Here's all the additional packages I load
#+begin_src emacs-lisp :tangle packages.el
;; (package! builtin-package :disable t)
(package! atom-one-dark-theme)
(package! org-modern)
(package! toc-org)
(package! ivy-posframe)
(package! dirvish)

(package! org-autolist)
(package! real-auto-save)
(package! cdlatex)

(package! dap-mode)
(package! lsp-pyright)
(package! ccls)
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
(package! treesit-auto)

(package! typit)
#+end_src

* Theme
** Doom Specific
Removing title bar and customizing basic doom settings
#+begin_src emacs-lisp :tangle config.el
(add-to-list 'default-frame-alist '(undecorated-round . t))
(load-theme 'atom-one-dark t)
;; (load-theme 'doom-one t)


(setq doom-font (font-spec :family "Recursive Monospace" :size 16 :weight 'regular) doom-variable-pitch-font (font-spec :family "Recursive" :size 16 :weight 'regular))
(setq doom-symbol-font (font-spec :family "SF Pro" ))
(setq fancy-splash-image "~/.config/doom/emacs-dash.png")
#+end_src

** Quality of Life
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type 'visual)
(setq-default line-spacing 0.12)
(setq-default tab-width 4) ;; 4 width tabs
(setq scroll-margin 8)
(setq mode-require-final-newline nil) ;; Removes snippets adding a new line
#+end_src

Better zooming
#+begin_src emacs-lisp :tangle config.el
;; Zooming
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)
(global-set-key (kbd "<s-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<s-wheel-down>") 'text-scale-decrease)
#+end_src

Modern looking Dired
#+begin_src emacs-lsip :tangle config.el
(dirvish-override-dired-mode)
#+end_src

** Ivy
This moves the ivy completion to the top of the screen like VSCode. The custom function makes it a fixed size
#+begin_src emacs-lisp :tangle config.el
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))

(defun my-ivy-posframe-get-size ()
"Set the ivy-posframe size according to the current frame."
(let ((height (or ivy-posframe-height (or ivy-height 10)))
        (width (min (or ivy-posframe-width 200) (round (* .75 (frame-width))))))
    (list :height height :width width :min-height height :min-width width)))

(setq ivy-posframe-size-function 'my-ivy-posframe-get-size)
(ivy-posframe-mode 1)
#+end_src
* Keyboard
Adding some basic keybinds
** Evil Rebinds
#+begin_src emacs-lisp :tangle config.el
(defun haadi/controlu ()
  (evil-scroll-up 0)
  (evil-scroll-line-to-center (line-number-at-pos))
  )
(defun haadi/controld ()
  (evil-scroll-down 0)
  (evil-scroll-line-to-center (line-number-at-pos))
  )
;; Need to figure out why search commands don't work...
(defun haadi/searchfwd ()
  (evil-search-next)
  (evil-scroll-line-to-center (line-number-at-pos))
  )
(defun haadi/searchprev ()
  (evil-search-previous)
  (evil-scroll-line-to-center (line-number-at-pos))
  )

(map! :map general-override-mode-map
      :n "<C-u>" #'haadi/controlu
      :desc "Goto mark" :n "M" #'evil-goto-mark
      )
#+end_src
** Config Files
I have a lot of config files I'd like to edit, so I made some maps
#+begin_src emacs-lisp :tangle config.el
(map! :map general-override-mode-map
      :desc "Open Emacs Config" :leader "f x e" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
      :desc "Open Firefox Config" :leader "f x f" #'(lambda() (interactive) (find-file "~/Library/Application Support/Firefox/Profiles/kw89h3lk.default-release-1701650262876/chrome/userChrome.css"))
      :desc "Open skhd Config" :leader "f x s" #'(lambda() (interactive) (find-file "~/.config/skhd/skhdrc"))
      :desc "Open Yabai Config" :leader "f x y" #'(lambda() (interactive) (find-file "~/.config/yabai/yabairc"))
      :desc "Open zsh Config" :leader "f x z" #'(lambda() (interactive) (find-file "~/.zshrc"))
      )

#+end_src
** Org
#+begin_src emacs-lisp :tangle config.el
(map! :map org-mode-map :leader :desc "Babel Tangle" :n "m k" #'org-babel-tangle)
(map! :map org-mode-map :leader :desc "Babel Tangle File" :n "m K" #'org-babel-tangle-file)
#+end_src
** Buffers
#+begin_src emacs-lisp :tangle config.el
(map! :leader :desc "List Buffers" :n "b l" #'list-buffers)
#+end_src
** Programming
#+begin_src emacs-lisp :tangle config.el
(map! :leader :desc "Format Buffer" :n "c f" #'lsp-format-buffer)
(map! :leader :desc "Docs Glance" :n "c h" #'lsp-ui-doc-toggle)
#+end_src

* Org
** Modern Org Mode
Makes Org Mode look better
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "~/org/")

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-fold-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…"

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "◀── now ─────────────────────────────────────────────────")

(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+end_src
** Fonts
Make the fonts bettter sized
#+begin_src emacs-lisp :tangle config.el
(use-package! evil-org
  :config
  (custom-set-faces
   '(org-document-title ((t (:inherit outline-1 :height 1.25))))
   '(org-document-info ((t (:inherit outline-1 :height 1.15))))
   '(org-level-1 ((t (:inherit outline-1 :height 1.15))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.125))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.075))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.05))))
   )
  )
(setq org-hide-emphasis-markers t) ;; Removes ** around bolded text etc.
#+end_src

** TOC
Add automatic table of contents
#+begin_src emacs-lisp :tangle config.el
;; Automatic bulleting
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable)
  )
(add-hook 'org-mode-hook
          (lambda () (org-autolist-mode)))

#+end_src
** Todo
Settings for Todo
#+begin_src emacs-lisp :tangle config.el
(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
      '((sequence
         "TODO(t)"
         "TEST(T)"
         "PHYS 2218(a)"
         "PHYS 3316(s)"
         "PHYS 3318(d)"
         "CS 3410(f)"
         "CS 4780(g)"
         "SCIOLY(h)"
         "|"
         "DONE(D)"
         "PROGRESS(p)"
         "CANCELLED(c)"
         "|"
         "PROG(P)"))
      )
(setq org-todo-keyword-faces'(
                              ("TODO" . org-warning)
                              ("TEST" .  (:foreground "#e06c75" :weight bold))
                              ("PHYS 3316" . "#d19a66")
                              ("PHYS 3318" . "#61afef")
                              ("PHYS 2218" . "#be5046")
                              ("CS 4780" . "#56b6c2")
                              ("CS 3410" . "#98c379")
                              ("SCIOLY" . "#98c379")
                              ("DONE" . "#5c6370")
                              ("PROGRESS" . "#5c6370")
                              ("CANCELLED" . (:foreground "#4b5263" :weight bold))
                              ("PROG" . "#e5c07b")
                              ))
#+end_src

** LaTeX
For some reason (even on emacs-plus) LaTeX embeds look like utter garbage on Mac (and Linux too for that matter). So, we do some elisp magic to make them look great! We render them at 3x the size, and then scale them down
#+begin_src emacs-lisp :tangle config.el
(setq org-preview-latex-default-process 'dvisvgm)
(plist-put org-format-latex-options :scale 3)
(defun my/image-scale-advice (image)
  (let* ((factor (image-property image :scale))
         (new-factor (if factor
                         (/ factor 2.0)
                       0.5)))
    (image--set-property image :scale new-factor)
    image))
(advice-add 'org--create-inline-image :filter-return #'my/image-scale-advice)
(defun my/overlay-scale-advice (beg end image &optional imagetype)
  (mapc (lambda (ov) (if (equal (overlay-get ov 'org-overlay-type) 'org-latex-overlay)
                                (overlay-put ov
                                             'display
                                             (list 'image :type (or (intern imagetype) 'png) :file image :ascent 'center :scale 0.5))))
        (overlays-at beg)))
(advice-add 'org--make-preview-overlay :after #'my/overlay-scale-advice)

(setq company-global-modes '(not org-mode)) ;; No more laggy company completion
(add-hook 'org-mode 'org-cdlatex-mode)
#+end_src
** Deft
Better searching through my org files. Will add a function so I can search through a list of premade tags
#+begin_src  emacs-lisp :tangle config.el
(setq deft-directory "~/org")
(setq deft-default-extension "org")
(setq deft-extensions '("org"))
(setq deft-recursive t)
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                                (nospace . "-")
                                (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
#+end_src

* Code
** Base LSP Config
Some basic config stuff. I added way too much ram for garbage collection, but I have the RAM so I may as well use it to make sure that my editing isn't slow lol
#+begin_src emacs-lisp :tangle config.el
(setq gc-cons-threshold 500000000) ;; 400mb
(setq read-process-output-max (* 8192 1024)) ;; 8mb
(setq company-minimum-prefix-length 1)
(setq lsp-idle-delay 0.1)
(setq lsp-log-io nil) ; if set to true can cause a performance hit
(setq lsp-completion-show-kind t)
(setq company-idle-delay 0.01)
#+end_src

Show previews for documentation in line and not in the minibuffer
#+begin_src emacs-lisp :tangle config.el
(setq lsp-ui-doc-enable t)
#+end_src

Auto save when working on programming
#+begin_src emacs-lisp :tangle config.el
;; (add-hook 'prog-mode-hook 'real-auto-save-mode)
;; (setq real-auto-save-interval 10) ;; in seconds
#+end_src

Remove the format on save hook with LSP. I'd rather format from a keybind
#+begin_src emacs-lisp :tangle config.el
;; (with-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook
     (lambda ()
        (remove-hook 'before-save-hook #'lsp-format-buffer t)
        (remove-hook 'before-save-hook #'lsp-organize-imports t))
) ;;)
#+end_src

** DAP Config
Config for DAP. Still a WIP
#+begin_src emacs-lisp :tangle config.el

;; (use-package dap-mode)
(use-package dap-mode
  :ensure
  :config
  (dap-mode 1)

  ;; installs .extension/vscode
  (dap-register-debug-template "Rust::CppTools Run Configuration"
                               (list :type "cppdbg"
                                     :request "launch"
                                     :name "Rust::Run"
                                     :MIMode "gdb"
                                     :miDebuggerPath "rust-gdb"
                                     :environment []
                                     :program "${workspaceFolder}/target/debug/REPLACETHIS"
                                     :cwd "${workspaceFolder}"
                                     :console "external"
                                     :dap-compilation "cargo build"
                                     :dap-compilation-dir "${workspaceFolder}")))

(with-eval-after-load 'dap-mode
  (setq dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
  (dap-auto-configure-mode +1))
#+end_src

** Treesitter
Seamlessly install treesitter for languages with no fuss
#+begin_src emacs-lisp :tangle config.el
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

#+end_src
** Rust
Rust!
#+begin_src emacs-lisp :tangle config.el
(after! rustic
  (setq rustic-format-on-save nil))

(map! :leader :desc "Toggle Breakpoint" :n "c b" #'dap-breakpoint-toggle)

;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

(map! :leader :desc "Toggle copilot" :n "c g" #'copilot-mode)
#+end_src
** Python
#+begin_src emacs-lisp :tangle config.el
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src
** C/C++
#+begin_src emacs-lisp :tangle config.el
(require 'ccls)
(setq ccls-executable "/opt/homebrew/bin/ccls")
#+end_src
** Typescript
#+begin_src emacs-lisp :tangle config.el
(use-package typescript-ts-mode
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode))
  :config
  (add-hook! '(typescript-ts-mode-hook tsx-ts-mode-hook) #'lsp!))
#+end_src

* LaTeX
Inspired by Gilles Castel blog post (RIP).

Makes LaTeX blazing fast in Emacs (albeit not as great as vim due to the lack of regex snippets).

** Base LaTeX
#+begin_src emacs-lisp :tangle config.el
;; AucTeX settings - almost no changes
(use-package latex
  :ensure auctex
  :hook ((LaTeX-mode . prettify-symbols-mode))
  :bind (:map LaTeX-mode-map
              ("C-S-e" . latex-math-from-calc))
  :config
  ;; Format math as a Latex string with Calc
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                  calc-prefer-frac t
                                  calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0)
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad))))))))
#+end_src
** Preview
#+begin_src emacs-lisp :tangle config.el
(use-package preview
  :after latex
  :hook ((LaTeX-mode . preview-larger-previews))
  :config
  (defun preview-larger-previews ()
    (setq preview-scale-function
          (lambda () (* 1.25
                        (funcall (preview-scale-from-face)))))))

#+end_src
** CD LaTeX
#+begin_src emacs-lisp :tangle config.el
(use-package cdlatex
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package yasnippet
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field))
  :config
  (use-package yasnippet
    :bind (:map yas-keymap
                ("<tab>" . yas-next-field-or-cdlatex)
                ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      "Jump to the next Yas field correctly with cdlatex active."
      (interactive)
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))
#+end_src

** Org Tables
#+begin_src emacs-lisp :tangle config.el
;; Array/tabular input with org-tables and cdlatex
(use-package org-table
  :after cdlatex
  :bind (:map orgtbl-mode-map
              ("<tab>" . lazytab-org-table-next-field-maybe)
              ("TAB" . lazytab-org-table-next-field-maybe))
  :init
  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
  ;; Tabular environments using cdlatex
  (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                        "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                        lazytab-position-cursor-and-edit
                                        nil nil t))
  (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                        "\\begin{bmatrix} ? \\end{bmatrix}"
                                        lazytab-position-cursor-and-edit
                                        nil nil t))
  (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                        "\\begin{pmatrix} ? \\end{pmatrix}"
                                        lazytab-position-cursor-and-edit
                                        nil nil t))
  (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                        "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                        lazytab-position-cursor-and-edit
                                        nil t nil))
  :config
  ;; Tab handling in org tables
  (defun lazytab-position-cursor-and-edit ()
    ;; (if (search-backward "\?" (- (point) 100) t)
    ;;     (delete-char 1))
    (cdlatex-position-cursor)
    (lazytab-orgtbl-edit))

  (defun lazytab-orgtbl-edit ()
    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
    (orgtbl-mode 1)

    (insert "\n|"))

  (defun lazytab-orgtbl-replace (_)
    (interactive "P")
    (unless (org-at-table-p) (user-error "Not at a table"))
    (let* ((table (org-table-to-lisp))
           params
           (replacement-table
            (if (texmathp)
                (lazytab-orgtbl-to-amsmath table params)
              (orgtbl-to-latex table params))))
      (kill-region (org-table-begin) (org-table-end))
      (open-line 1)
      (push-mark)
      (insert replacement-table)
      (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
      (orgtbl-mode -1)
      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))

  (defun lazytab-orgtbl-to-amsmath (table params)
    (orgtbl-to-generic
     table
     (org-combine-plists
      '(:splice t
        :lstart ""
        :lend " \\\\"
        :sep " & "
        :hline nil
        :llend "")
      params)))

  (defun lazytab-cdlatex-or-orgtbl-next-field ()
    (when (and (bound-and-true-p orgtbl-mode)
               (org-at-table-p)
               (looking-at "[[:space:]]*\\(?:|\\|$\\)")
               (let ((s (thing-at-point 'sexp)))
                 (not (and s (assoc s cdlatex-command-alist-comb)))))
      (call-interactively #'org-table-next-field)
      t))

  (defun lazytab-org-table-next-field-maybe ()
    (interactive)
    (if (bound-and-true-p cdlatex-mode)
        (cdlatex-tab)
      (org-table-next-field))))
#+end_src

** Snippets
#+begin_src emacs-lisp :tangle config.el
(defun ndk/zap-newline-at-eob ()
  (let ((make-backup-files nil))
     (goto-char (point-max))
     (when (equal (char-before) ?\n)
       (delete-char -1)
       (save-buffer))))

  (add-hook 'org-babel-post-tangle-hook #'ndk/zap-newline-at-eob)
#+end_src
* Random
** Typit
Sometimes when I'm bored I open monkeytype to do a typing test. You can do it in emacs!
#+begin_src emacs-lisp :tangle config.el
(setq typit-test-time 15)
#+end_src