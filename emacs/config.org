#+TITLE: Emacs Config
#+AUTHOR: Haadi Khan

*WIP*
| Goal         | Progress                                |
|--------------+-----------------------------------------|
| File Configs | Grammar stuff needs to be done for text |
| Java         | LSP needs to be configured              |

* Startup
Order Matters, do NOT mess with it
** Setup MELPA
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

** Use-Package
Install use-package and enable ':ensure t' globally.  The ':ensure' keyword causes the package(s) within use-package statements to be installed automatically if not already present on your system.  To avoid having to add ':ensure t' to every use-package statement in this config, I set 'use-package-always-ensure'.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+end_src

** Evil Mode
Enable Vim
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection ;; adds vim everywhere
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (require 'undo-tree)
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree)
  (use-package key-chord
  :ensure t)
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
#+end_src

** General Keybindings
Package which makes setting keybinds way easier
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package general
  :config
  (general-evil-setup t))
#+end_src

** Auto Save
Who doesn't love continuous auto save
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'real-auto-save)
(real-auto-save-mode 1)
(setq real-auto-save-interval 5) ;; in seconds
#+end_src
* Speed Improvements
Vim is fast. Emacs is slow. Make Emacs not slow.
** Garbage collection
Makes startup faster by reducing the frequency of garbage collection
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
** Native Compile
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* Theming
Basic Settings for Emacs

** Theme
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(load-theme 'atom-one-dark t)
#+end_src

** Disable Toolbars and Scrollbars
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;;(menu-bar-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Line Configuration
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(global-display-line-numbers-mode 1)
(electric-pair-mode 1)
(setq display-line-numbers-type 'relative)
(setq scroll-margin 8)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'prog-mode-hook 'origami-mode)

;;(setq-default tab-width 4)
(require 'fill-column-indicator)
(setq fci-rule-width 5)
(add-hook 'prog-mode-hook 'fci-mode)
#+end_src

** Indent Guides
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
#+end_src

** Doom Modeline
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package doom-modeline)
(doom-modeline-mode 1)
#+end_src

** Icons
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package all-the-icons)
#+end_src
** Fonts
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(set-face-attribute 'default nil
  :font "Roboto Mono"
  :height 120
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Roboto Mono"
  :height 140
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Roboto Mono"
  :height 110
  :weight 'medium)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Roboto Mono-11"))
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
#+end_src

** Zooming
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Scrolling
Emacs' default scrolling is annoying because of the sudden half-page jumps.  Also, I wanted to adjust the scrolling speed.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src
** Emojis
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src
** Delete Selection
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(delete-selection-mode t)
#+end_src

* Buffer Options

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

* Dashboard
Dashboard when starting Emacs, looks cool

** Configuring Dashboard

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
      (use-package dashboard
	:init      ;; tweak dashboard config before loading it
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	;;(setq dashboard-banner-logo-title "Emacs: Sweaty Virgin Editor")
	;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
	(setq dashboard-startup-banner "~/.config/emacs/emacs-dash.png")  ;; use custom image as banner
	(setq dashboard-center-content nil) ;; set to 't' for centered content
	(setq dashboard-items '((recents . 5)
				(agenda . 5)
				(bookmarks . 5)
				(projects . 3)))
	:config
	(dashboard-setup-startup-hook)
	(dashboard-modify-heading-icons '((recents . "file-text")
				    (bookmarks . "book"))))
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Elisp Evaluation
| COMMAND         | DESCRIPTION                                    | KEYBINDING |
|-----------------+------------------------------------------------+------------|
| eval-buffer     | /Evaluate elisp in buffer/                       | SPC e b    |
| eval-defun      | /Evaluate the defun containing or after point/   | SPC e d    |
| eval-expression | /Evaluate an elisp expression/                   | SPC e e    |
| eval-last-sexp  | /Evaluate elisp expression before point/         | SPC e l    |
| eval-region     | /Evaluate elisp in region/                       | SPC e r    |

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
       "e d"   '(eval-defun :which-key "Eval defun")
       "e e"   '(eval-expression :which-key "Eval elisp expression")
       "e l"   '(eval-last-sexp :which-key "Eval last sexression")
       "e r"   '(eval-region :which-key "Eval region"))
#+end_src
  
* Dired
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'ranger)
;;(use-package ranger
;;:after dired
;;:config
    ;;(setq ranger-modify-header nil)
    ;;(setq ranger-max-parent-width 0.12)
    ;;(setq ranger-width-preview 0.55)
    ;;(setq ranger-dont-show-binary t))
#+end_src
** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* Keybinds
General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  It certainly is easier on the hands than constantly using CTRL for a prefix.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(counsel-M-x :which-key "M-x")
       "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/config.el")) :which-key "Reload emacs config")
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
       "t j"   '(flyspell-auto-correct-word :which-key "Auto Correct Word")
       "t k"   '(flyspell-correct-word-before-point :which-key "Auto Correct Menu")
       "t l"   '(langtool-check :which-key "Grammar Check")
       "t ;"   '(langtool-check-done :which-key "Toggle Grammar Check")
       "o m"   '(magit :which-key "Open Magit"))
(nvmap :keymaps 'override :prefix "SPC"
       "j k"   '(treemacs :which-key "Toggle Treemacs")
       "j K"   '(treemacs-select-directory :which-key "Select Treemacs Directory"))
(nvmap :keymaps 'override :prefix "SPC"
       "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
       "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
       "m ."   '(counsel-org-goto :which-key "Counsel org goto")
       "m d"   '(org-deadline :which-key "Org set deadline")'
       "m e"   '(org-export-dispatch :which-key "Org export dispatch")
       "m f"   '(org-footnote-new :which-key "Org footnote new")
       "m h"   '(org-toggle-heading :which-key "Org toggle heading")
       "m i"   '(org-toggle-item :which-key "Org toggle item")
       "m n"   '(org-store-link :which-key "Org store link")
       "m o"   '(org-set-property :which-key "Org set property")
       "m s"   '(org-schedule :which-key "Org set schedule")'
       "m t"   '(org-todo :which-key "Org todo")
       "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
       "m b"   '(org-babel-tangle :which-key "Org babel tangle")
       "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "m T"   '(org-todo-list :which-key "Org todo list")
       "o a"   '(org-agenda :which-key "Org agenda")
       )
#+end_src
  
* Completion
Ivy, counsel and swiper are a generic completion mechanism for Emacs.  Ivy-rich allows us to add descriptions alongside the commands in M-x.

** Installing Ivy And Basic Setup
#+begin_src emacs-lisp  :tangle ~/.config/emacs/config.el
(use-package counsel
  :after ivy
  :config (counsel-mode))
(use-package ivy
  :defer 0.1
  :diminish
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

** M-x Improvements
The following line removes the annoying '^' in things like counsel-M-x and other ivy/counsel prompts.  The default '^' string means that if you type something immediately after this string only completion candidates that begin with what you typed are shown.  Most of the time, I'm searching for a command without knowing what it begins with though.

#+begin_src emacs-lisp  :tangle ~/.config/emacs/config.el
(setq ivy-initial-inputs-alist nil)
#+end_src

Smex is a package the makes M-x remember our history.  Now M-x will show our last used commands first.
#+begin_src  emacs-lisp :tangle ~/.config/emacs/config.el
(use-package smex)
(smex-initialize)
#+end_src

** Ivy-posframe
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
  (use-package ivy-posframe
    :init
    (setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
    :config
    (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

* Languages
Adding lsps and syntax highlighting for programming

** LSP
This is the base configs for LSP Mode in Emacs
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package lsp-mode
    :commands
        (lsp lsp-deferred)
    :init
        (setq lsp-keymap-prefix "C-c l")
        (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-idle-delay 0.0
        company-minimum-prefix-length 1
        lsp-idle-delay 0.1)
    :config
        (lsp-enable-snippet t)
        (setq lsp-lens-enable nil)
        (lsp-enable-which-key-integration t)
)

#+end_src
** Tree Sitter
Tree Sitter is a package which allows for better syntax highlighting
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package tree-sitter
  :ensure t
  :init (require 'tree-sitter-langs)
)
#+end_src
** DAP
This is the base configs for DAP Mode in Emacs. LSP Mode is required for this to work
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package dap-mode
    :defer
    :custom
        (dap-auto-configure-mode t                           "Automatically configure dap.")
        (dap-auto-configure-features
        '(sessions locals breakpoints expressions tooltip)  "Remove the button panel in the top.")
)
#+end_src
** Keybind Map
This is a section for all the keybinds for language features. This will be
broken up across LSP and DAP features.
*** LSP
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :keymaps 'override :prefix "SPC"
       "c c"   '(compile :which-key "Compile")
       "c t"   '(projectile-test-project :which-key "Run Unit Tests")
       "c r"   '(lsp-rename :which-key "Rename Symbol"))
#+end_src
*** DAP
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :keymaps 'override :prefix "SPC"
       "c b"   '(dap-breakpoint-toggle :which-key "Toggle Breakpoint")
       "c d"   '(dap-debug-last :which-key "Debug Code")
       "c u"   '(dap-next :which-key "Step Over")
       "c i"   '(dap-step-in :which-key "Step Into")
       "c o"   '(dap-continue :which-key "Continue"))
#+end_src
** C++
*** LSP + Comfort Settings
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'clang-format+) ;; Auto formatting

(c-add-style "my-style" 
	     '("stroustrup"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 4)            ; indent by four spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (lsp t)
  (tree-sitter-hl-mode)
  (clang-format+-mode 1)
  ;;(setq compile-command "cd .. && g++ -g $(find ./src -type f -iregex \".*\\.cpp\") -o ./bin/")
  (setq compile-command "cd .. && g++ -o bin/minesweeper $(find ./src -type f -iregex \".*\\.cpp\") -LC:/dev/lib -lsfml-system -lsfml-window -lsfml-graphics -lsfml-audio -lsfml-network")
)

(add-hook 'c-mode-common-hook 'my-c++-mode-hook)

#+end_src

*** Debugger
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; This hook covers everything needed to debug c++ code
(defun c++-debug-hook ()
  (require 'dap-lldb)
  ;;; set the debugger executable (c++)
  (setq dap-lldb-debug-program '("/usr/bin/lldb-vscode"))
  ;;; ask user for executable to debug if not specified explicitly (c++)
  (setq dap-lldb-debugged-program-function (lambda () (read-file-name "Select file to debug.")))
  ;;; default debug template for (c++)
  (dap-register-debug-template
   "C++ LLDB dap"
   (list :type "lldb-vscode"
         :cwd nil
         :args nil
         :request "launch"
         :program nil))
  
  (defun dap-debug-create-or-edit-json-template ()
    "Edit the C++ debugging configuration or create + edit if none exists yet."
    (interactive)
    (let ((filename (concat (lsp-workspace-root) "/launch.json"))
	  (default "~/.emacs.d/default-launch.json"))
      (unless (file-exists-p filename)
	(copy-file default filename))
      (find-file-existing filename)))
)

(add-hook 'c-mode-common-hook 'c++-debug-hook)
#+end_src
** Java
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package lsp-java
:ensure t
:hook (java-mode . (lambda ()
                          (require 'lsp-java)
                          (lsp))))  ; or lsp-deferred
(require 'dap-java)
#+end_src

** Python
*** Basic Config
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
(require 'dap-python)
(setq dap-python-debugger 'debugpy)
(use-package pyvenv
    :config (pyvenv-mode 1))

(add-hook 'python-mode 'tree-sitter-hl-mode)
#+end_src
*** Jupyter Notebooks
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'ein)
(setq ein:use-auto-complete t)
(setq ein:use-smartrep t)
(add-hook 'ein:notebook-mode-map 'undo-tree-mode) 
#+end_src

* File Configs
** File-related Keybindings

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(find-file :which-key "Find file")
    "f f"   '(find-file :which-key "Find file")
    "f p"   '(projectile-find-file :which-key "Find File in Project")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Installing Some Useful File-related Modules
Though 'recentf' is one way to find recent files although I prefer using 'counsel-recentf'.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package recentf
:config
(recentf-mode))
(use-package sudo-edit) ;; Utilities for opening files with sudo

#+end_src

** Useful File Functions
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(defun dt/show-and-copy-buffer-path ()
"Show and copy the full path to the current file in the minibuffer."
(interactive)
;; list-buffers-directory is the variable set in dired buffers
(let ((file-name (or (buffer-file-name) list-buffers-directory)))
(if file-name
    (message (kill-new file-name))
    (error "Buffer not visiting a file"))))
(defun dt/show-buffer-path-name ()
"Show the full path to the current file in the minibuffer."
(interactive)
(let ((file-name (buffer-file-name)))
(if file-name
    (progn
	(message file-name)
	(kill-new file-name))
    (error "Buffer not visiting a file"))))
#+end_src

** File Specific Configs
*** Text Modes
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; Spell Checking
(use-package langtool
:hook (text-mode . (lambda ()
			(require 'langtool)))
:config
;; Setup Langtool and set default language to US English
(setq langtool-java-classpath
	"/usr/share/languagetool:/usr/share/java/languagetool/*")
(setq langtool-default-language "en-US")
)
(use-package flyspell-popup)
(use-package flyspell
:hook (text-mode . (lambda ()
			(require 'flyspell))))
(setq ispell-program-name "hunspell")
(add-hook 'text-mode-hook 'visual-line-mode)

;;(defvar mu-languages-ring nil "Languages ring for Ispell")
;;
;;(let ((languages '("en_US" "es_ES")))
;;(validate-setq mu-languages-ring (make-ring (length languages)))
;;(dolist (elem languages) (ring-insert mu-languages-ring elem)))
;;
;;(defun mu-cycle-ispell-languages ()
;;(interactive)
;;(let ((language (ring-ref mu-languages-ring -1)))
;;(ring-insert mu-languages-ring language)
;;(ispell-change-dictionary language)))


#+end_src
* Org Mode
** Setup
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package evil-org
:ensure t
:after org
:hook (org-mode . (lambda () evil-org-mode))
:config
(setq split-width-threshold nil)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys))
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'writeroom-mode)
(setq org-directory "~/org/"
    org-agenda-files '("~/org/todos.org")
    org-default-notes-file (expand-file-name "notes.org" org-directory)
    org-ellipsis "..."
    org-log-done 'time
    org-journal-dir "~/org/journal/"
    org-journal-date-format "%B %d, %Y (%A) "
    org-journal-file-format "%Y-%m-%d.org"
    org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
    org-src-tab-acts-natively t
    org-edit-src-content-indentation 0)
(custom-set-faces
'(org-document-title ((t (:inherit outline-1 :height 1.25))))
'(org-document-info ((t (:inherit outline-1 :height 1.15))))
'(org-level-1 ((t (:inherit outline-1 :height 1.15))))
'(org-level-2 ((t (:inherit outline-2 :height 1.125))))
'(org-level-3 ((t (:inherit outline-3 :height 1.1))))
'(org-level-4 ((t (:inherit outline-4 :height 1.075))))
'(org-level-5 ((t (:inherit outline-5 :height 1.05))))
)
(define-key org-mode-map (kbd "<tab>") 'org-cycle)
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package org-superstar ; "prettier" bullets
:hook (org-mode . org-superstar-mode)
:config
;; Make leading stars truly invisible, by rendering them as spaces!
(setq org-superstar-leading-bullet ?\s
    org-superstar-leading-fallback ?\s
    org-hide-leading-stars nil
    org-superstar-todo-bullet-alist
    '(("TODO" . 9744)
	("[ ]"  . 9744)
	("DONE" . 9745)
	("[X]"  . 9745))))
#+end_src

** Org Link Abbreviations
This allows for the use of abbreviations that will get expanded out into a lengthy URL.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
;; An example of how this works.
;; [[arch-wiki:Name_of_Page][Description]]
(setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
    '(("google" . "http://www.google.com/search?q=")
	("arch-wiki" . "https://wiki.archlinux.org/index.php/")
	("ddg" . "https://duckduckgo.com/?q=")
	("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

** Org Todo Keywords
This lets us create the various TODO tags that we can use in Org.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
'((sequence
	"TODO(t)"
	"TEST(T)"
	"APUSH(a)"
	"STAT(s)"
	"PHYSICS(P)"
	"CALC(C)"
	"LANG(l)"
	"SPAN(f)"
	"MULTI(m)"
	"CS(S)"
	"ROBO(r)"
	"SCIOLY(g)"
	"|"
	"DONE(d)"
	"CANCELLED(c)"
	"|"
	"PROG(p)"))
)
(setq org-todo-keyword-faces'(
    ("TODO" . org-warning)
    ("TEST" .  (:foreground "#e06c75" :weight bold))
    ("APUSH" . "#e5c07b")
    ("STAT" . "#61afef")
    ("PHYSICS" . "#98c379")
    ("CALC" . "#61afef")
    ("LANG" . "#d19a66")
    ("SPAN" . "#d19a66")
    ("MULTI" . "#56b6c2")
    ("CS" . "#56b6c2")
    ("ROBO" . "#be5046")
    ("SCIOLY" . "#98c379")
    ("DONE" . "#5c6370")
    ("CANCELLED" . (:foreground "#4b5263" :weight bold))
    ("PROG" . "#e5c07b")
))
#+end_src

** Disable Blank Line from M-RET
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq org-blank-before-new-entry (quote ((heading . nil)
					(plain-list-item . nil))))
#+end_src
** Source Code Block Tag Expansion
Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package org-tempo
:ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src

** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq org-src-fontify-natively t
org-src-tab-acts-natively t
org-confirm-babel-evaluate nil
org-edit-src-content-indentation 0)
#+end_src

** Automatically Create Table of Contents
Toc-org helps you to have an up-to-date table of contents in org files without exporting (useful useful for README files on GitHub).  Use :TOC: to create the table.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package toc-org
:commands toc-org-enable
:init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** LaTeX within Org Mode
LaTeX is fire, make it so I can take better math/physics notes
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(add-hook 'org-mode-hook 'org-fragtog-mode)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+end_src
** Org Roam
Basically lets note taking go on crack
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(defun my/org-roam-select-quantum ()
  (interactive)
  (org-roam-node-read
   nil
   (lambda (node)
     (member "Quantum-Mech" (org-roam-node-tags node)))
   (lambda (completion-a completion-b)
     (< (length (org-roam-node-title (cdr completion-a)))
        (length (org-roam-node-title (cdr completion-b)))))
   t))
(defun my/org-roam-select-particle ()
  (interactive)
  (org-roam-node-read
   nil
   (lambda (node)
     (member "Particle-Physics" (org-roam-node-tags node)))
   (lambda (completion-a completion-b)
     (< (length (org-roam-node-title (cdr completion-a)))
        (length (org-roam-node-title (cdr completion-b)))))
   t))
(defun my/org-roam-select-ml ()
  (interactive)
  (org-roam-node-read
   nil
   (lambda (node)
     (member "ML" (org-roam-node-tags node)))
   (lambda (completion-a completion-b)
     (< (length (org-roam-node-title (cdr completion-a)))
        (length (org-roam-node-title (cdr completion-b)))))
   t))
(defun my/org-roam-select-dsa ()
  (interactive)
  (org-roam-node-read
   nil
   (lambda (node)
     (member "DSA" (org-roam-node-tags node)))
   (lambda (completion-a completion-b)
     (< (length (org-roam-node-title (cdr completion-a)))
        (length (org-roam-node-title (cdr completion-b)))))
   t))
#+end_src 

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package org-roam
:ensure t
:custom
(org-roam-directory "~/org-roam")
:config
(org-roam-setup)
)
(nvmap :keymaps 'override :prefix "SPC"
    "m r r"   '(org-roam-buffer-toggle :which-key "Toggle Org Roam")
    "m r a"   '(org-roam-tag-add :which-key "Add Org Roam Tag")
    "m r f"   '(org-roam-node-find :which-key "Find Org Node")
    "m r q"   '(my/org-roam-select-quantum() :which-key "Pick Quantum Note")
    "m r p"   '(my/org-roam-select-particle() :which-key "Pick Par. Phy. Note")
    "m r m"   '(my/org-roam-select-ml() :which-key "Pick ML Note")
    "m r d"   '(my/org-roam-select-dsa() :which-key "Pick DSA Note")
    "m r i"   '(org-roam-node-insert :which-key "Insert New Org Node"))
#+end_src 

* Magit

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq bare-git-dir (concat "--git-dir=" (expand-file-name "~/.dotfiles")))
(setq bare-work-tree (concat "--work-tree=" (expand-file-name "~")))
;; use maggit on git bare repos like dotfiles repos, don't forget to change `bare-git-dir' and `bare-work-tree' to your needs
(defun me/magit-status-bare ()
"set --git-dir and --work-tree in `magit-git-global-arguments' to `bare-git-dir' and `bare-work-tree' and calls `magit-status'"
(interactive)
(require 'magit-git)
(add-to-list 'magit-git-global-arguments bare-git-dir)
(add-to-list 'magit-git-global-arguments bare-work-tree)
(call-interactively 'magit-status))

;; if you use `me/magit-status-bare' you cant use `magit-status' on other other repos you have to unset `--git-dir' and `--work-tree'
;; use `me/magit-status' insted it unsets those before calling `magit-status'
(defun me/magit-status ()
"removes --git-dir and --work-tree in `magit-git-global-arguments' and calls `magit-status'"
(interactive)
(require 'magit-git)
(setq magit-git-global-arguments (remove bare-git-dir magit-git-global-arguments))
(setq magit-git-global-arguments (remove bare-work-tree magit-git-global-arguments))
(call-interactively 'magit-status))

(use-package magit)
#+end_src

* Treemacs
#+BEGIN_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package treemacs)
(use-package treemacs-evil)
(add-hook 'treemacs-mode 'display-line-numbers-mode 0)
(treemacs-load-theme "Atom")
#+END_SRC

This is my custom keymap for the treemacs window
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(define-key treemacs-mode-map (kbd "a") 'treemacs-create-file)
(define-key treemacs-mode-map (kbd "A") 'treemacs-create-dir)
(define-key treemacs-mode-map (kbd "s") 'treemacs-create-file)
#+end_src

* Perspective
The Perspective package provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers like Awesome and XMonad.  Each perspective has its own buffer list and its own window layout. This makes it easy to work on many separate projects without getting lost in all the buffers. Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package perspective
:bind
("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
:config
(persp-mode))
#+end_src

* Projectile
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package projectile
:config
(projectile-global-mode 1))
;; This is a feature to make running unit tests easier, turn off if you projects you didn't write
;;(setq compilation-read-command nil)
#+end_src

* Registers
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.  The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, so I chose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(nvmap :prefix "SPC"
    "r c"   '(copy-to-register :which-key "Copy to register")
    "r f"   '(frameset-to-register :which-key "Frameset to register")
    "r i"   '(insert-register :which-key "Insert register")
    "r j"   '(jump-to-register :which-key "Jump to register")
    "r l"   '(list-registers :which-key "List registers")
    "r n"   '(number-to-register :which-key "Number to register")
    "r r"   '(counsel-register :which-key "Choose a register")
    "r v"   '(view-register :which-key "View a register")
    "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
    "r +"   '(increment-register :which-key "Increment register")
    "r SPC" '(point-to-register :which-key "Point to register"))
#+end_src

* Terminal
Terminal Emulator
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package vterm)
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)
(nvmap :prefix "SPC"
       "o t"   '(vterm :which-key "Terminal"))
#+end_src
* Window Control
Makes organizing buffers far easier
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

* RSS Reader
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #fff :weight bold"
        elfeed-feeds (quote
                       (("https://www.reddit.com/r/linux.rss" reddit linux)
                        ("http://www.aljazeera.com/xml/rss/all.xml" Al Jazeera World)
                        ("http://www.npr.org/rss/rss.php?id=1004" NPR World)
                        ("npr.org/rss/rss.php?id=1001" NPR US)
                        ("http://www.politico.com/rss/politicopicks.xml" Politico US)
                        ("https://hackaday.com/blog/feed/" Hackaday)
                        ("https://www.computerworld.com/index.rss" Computerworld)
                        ("https://itsfoss.com/feed/" ItsFOSS)
                        ("https://www.reddit.com/r/archlinux.rss" )
                        ("https://www.reddit.com/r/frc.rss" )
                        ("https://www.reddit.com/r/linuxmasterrace.rss" )
                        ("https://www.reddit.com/r/programmerhumor.rss" )
                        ("https://www.reddit.com/r/mechanicalkeyboards.rss" )
                        ("https://www.reddit.com/r/pcmasterrace.rss" )
                        ("https://www.reddit.com/r/physicsmemes.rss" )
                        ("https://www.reddit.com/r/unixporn.rss" )
                        ("https://www.reddit.com/r/science.rss" )))))

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

(add-hook 'elfeed-show-mode-hook 'visual-line-mode)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src
* Web Browser
Because of the RSS reader, a basic web browser would be appreciated. EAF browser allows CSS to be rendered, something which eww can't do
** EAF
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package eaf
  :load-path "~/.config/emacs/site-lisp/emacs-application-framework"
  :custom
  ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)
  :config
  (defalias 'browse-web #'eaf-open-browser)
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
(require 'eaf-browser)
(require 'eaf-evil)
#+end_src
** Vimium
This enables vim keys for navigation
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(define-key key-translation-map (kbd "SPC")
    (lambda (prompt)
      (if (derived-mode-p 'eaf-mode)
          (pcase eaf--buffer-app-name
            ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
                           (kbd "SPC")
                         (kbd eaf-evil-leader-key)))
            ("pdf-viewer" (kbd eaf-evil-leader-key))
            ("image-viewer" (kbd eaf-evil-leader-key))
            (_  (kbd "SPC")))
        (kbd "SPC"))))
#+end_src
** Configs
Some basic browser configs
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq eaf-browser-translate-language "es")
(setq eaf-browser-enable-adblocker t)
#+end_src
* Which Key
Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

=NOTE:= Which-key has an annoying bug that in some fonts and font sizes, the bottom row in which key gets covered up by the modeline.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src

* ERC
This is more for shits and gigs while I try to make emacs use discord
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq erc-server "localhost"
  erc-port "6667"
  erc-track-shorten-start 8
  erc-auto-query 'bury)

(use-package erc-image
  :after erc)
#+end_src
* Misc. Config
** No Junk Files
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(setq
    make-backup-files nil
    auto-save-default nil
    create-lockfiles nil)
#+end_src

** Google Translate
Handy for Spanish
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package google-translate)
(require 'google-translate)
(require 'google-translate-default-ui)
#+end_src

** Prayer Times
To integrate Islamic prayer times into Emacs, we have to manually add the package since it isn't on melpa
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(add-to-list 'load-path "~/.config/emacs/lisp/")
(load "awqat.el") 
#+end_src

Next, we have to set some variables for our config
+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(require 'awqat)
(setq calendar-latitude 40.812119
    calendar-longitude -73.3432)
(setq awqat-asr-hanafi nil)
(setq awqat-fajr-angle 15.0)
(setq awqat-isha-angle 15.0)
(setq org-agenda-include-diary t)
#+end_src

** Writeroom Mode
A minor mode for Emacs that implements a distraction-free writing mode similar to the famous Writeroom editor for OS X.

#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package writeroom-mode)
#+end_src
** Pomodoro Timer
Package to enable pomodoro timing within emacs itself
#+begin_src emacs-lisp :tangle ~/.config/emacs/config.el
(use-package pomodoro)
#+end_src
